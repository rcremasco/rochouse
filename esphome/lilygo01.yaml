substitutions:
  esp_name: ESP Display #Device Name
  esp_hostname: esp-display 
  ip_address: 192.168.10.237
  ip_gw: 192.168.10.1
  ip_netmask: 255.255.255.0
  run_time: 5min #can be as long as needed to get data 
  sleep_time: 1min # normal sleep time
  night_sleep_time: 6h # 1st sleep time after midnight
  


esphome:
  name: liligo-t5-47-epaper-plus
  platformio_options:
    board_dir: boards
    #include https://github.com/Xinyuan-LilyGO/LilyGo-EPD47/blob/master/platformio/boards/lilygo-t5-47-plus.json as custom board
    board: lilygo-t5-47-plus

esp32:
  variant: esp32s3
  board: lilygo-t5-47-plus

  framework:
    type: arduino
    # You don't need to specify version and platform_version

logger:
  level: VERBOSE
  # hardware_uart: USB_CDC  # see note about <https://github.com/esphome/feature-requests/issues/1906> above

# Enable Home Assistant API
api:
  encryption:
    key: "rZjS7VS1G5PPFc7JLfwWYGMZ8LVg81Mokz9UUoCel00="

ota:
  password: "6903efa08992bfb72e6e2545357799ae"
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: ${ip_address}
    gateway: ${ip_gw}
    subnet: ${ip_netmask}
    # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Lilygo-T5 Fallback Hotspot"
    password: "xHMGPUOTHBjX"

deep_sleep:
  run_duration: ${run_time} 
  sleep_duration: ${sleep_time}
  id: deep_sleep_1
  esp32_ext1_wakeup:
    pins: GPIO21
    mode: ALL_LOW

captive_portal:

  # mqtt
mqtt:
  id: rocmqtt
  broker: 192.168.10.4
  birth_message:
    topic: lilygo01/status
    payload: online
  will_message:
    topic: lilygo01/status
    payload: offline
  on_connect:
    - logger.log: 'MQTT connected'
  on_json_message:
    topic: weather/loop
    then:
      - logger.log: "MQTT Ci siamo"
      - lambda: |-
          if (x.containsKey("windGust_kph")) {
            float windGust = x["windGust_kph"];
            ESP_LOGI("main", "---------value is: %2.4f ", windGust );
            id(mqtt_wind_max_speed) = windGust;
          }

      - logger.log:
          format: "MQTT message received %2.4f"
          args: [ id(mqtt_wind_max_speed) ]

globals:
  - id: mqtt_wind_max_speed
    type: float
    restore_value: no
    initial_value: "1.1"

i2c:
  sda: GPIO17
  scl: GPIO18
  # There is some problems with i2c scan so turn scan off if problem appear on your board
  scan: false
  id: bus_a

external_components:
  - source: github://nickolay/esphome-lilygo-t547plus
    components: ["t547"]
  # https://github.com/kaeltis/esphome-lilygo-t547plus
  - source: github://kaeltis/esphome-lilygo-t547plus
    components: ["lilygo_t5_47_battery"]

time:
  - platform: homeassistant
    timezone: Europe/Rome
    id: esptime

font:
  - file: "fonts/segoeui.ttf"
    id: segoe
#    size: 48
    size: 56
  - file: "fonts/segoeui.ttf"
    id: segoesmall
#    size: 32
    size: 48
  - file: "fonts/segoeui.ttf"
    id: segoebat
    size: 26
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_icons
    size: 48
    glyphs:
      - "\U000F06D5" # fulmine energia
      - "\U000F095B" # corrente alternata
      - "\U000F09C2" # freccia verso destra
      - "\U000F09C0" # freccia verso sinistra
      - "\U000F0D3E" # Traliccio
      - "\U000F17FF" # sole
      - "\U000F192C" # traliccio freccia destra
      - "\U000F192D" # traliccio freccia sinistra
      - "\U000F06A1" # casa
      - "\U000F10C2" # Termometro
      - "\U000F0207" # quadrato con freccia che esce
      - "\U000F059D" # vento
      - "\U000F0DBB" # raffica
      - "\U000F058E" # Umidità
      - "\U000F06A0" # pellet
      - "\U000f028F" # Cucina
      - "\U000F12D3" # Garage chiuso
      - "\U000F12D4" # garage aperto
      - "\U000F156D" # Sala
      - "\U000F07C0" # Studio
      - "\U000F157D" # faccina che suda
      - "\U000F0CDC" # adesso
      - "\U000F1478" # 24 ore
      - "\U000F00B5" # pressione
      - "\U000F0596" # pioggia


# sensori inviati verso HA
sensor:
  - platform: wifi_signal
    name: "eink01 - WiFi Signal Strength"
    id: wifisignal
    unit_of_measurement: "dBm"
    entity_category: "diagnostic"
    update_interval: 60s
  - platform: homeassistant
    name: "Power Balance"
    id: powerbalance
    entity_id: sensor.powerbalance
  - platform: homeassistant
    name: "Potenza consumata"
    id: powerconsumed
    entity_id: sensor.powerconsumed
  - platform: homeassistant
    name: "Potenza Generata"
    id: powergenerated
    entity_id: sensor.powergenerated
  - platform: homeassistant
    name: "Temperatura Esterna"
    id: externaltemp
    entity_id: sensor.externaltemp
  - platform: homeassistant
    name: "Velocità Vento"
    id: windspeed
    entity_id: sensor.velvento
  - platform: homeassistant
    name: "Raffica Vento"
    id: rafspeed # id interno
    entity_id: sensor.rafspeed # id lato HA
  - platform: homeassistant
    name: "Umidità Esterna"
    id: umiditaesterna
    entity_id: sensor.umiditaesterna
  - platform: homeassistant
    name: "Livello Pellet"
    id: pellet
    entity_id: sensor.pellet
  - platform: homeassistant
    name: "Temperatura Sala"
    id: tempsala
    entity_id: sensor.temperature_52
  - platform: homeassistant
    name: "Temperatura Cucina"
    id: tempcucina
    entity_id: sensor.temperature_55
  - platform: homeassistant
    name: "Temperatura Studio"
    id: tempstudio
    entity_id: sensor.temperature_70
  - platform: homeassistant
    name: "Temperatura percepita"
    id: temppercepita
    entity_id: sensor.meteo_temperatura_percepita
  - platform: homeassistant
    name: "Pioggia"
    id: pioggia
    entity_id: sensor.meteo_pioggia_cm_ora
  - platform: homeassistant
    name: "Pioggia in 1 giorno"
    id: pioggia1giorno
    entity_id: sensor.meteo_pioggia_cm_in_24_ore
  - platform: homeassistant
    name: "Pressione"
    id: pressione
    entity_id: sensor.meteo_pressione
  # - platform: mqtt_subscribe
  #   name: "Data from topic"
  #   id: dataFromTopic
  #   topic: weather/loop
  - platform: lilygo_t5_47_battery
    id: battery_voltage
    voltage:
      name: "Battery Voltage"

  - platform: template
    name: "Battery Percentage"
    id: battery_percentage
    lambda: |-
      // tweak values in mapping for calibration
      // 4.1 = max voltage
      // 3.3 = min voltage
      float y = (id(battery_voltage).voltage->state - 3.3) * 100.0 / (4.1 - 3.3);
      if (y < 100.0) { return y; } else { return 100.0; };

binary_sensor:
#  - platform: gpio
#    pin:
#      number: GPIO21 #was GPIO39 on the previous board
#      inverted: true
#    name: "Button 1"
#    on_press:
#      - logger.log: PhysButton Pressed
#      - component.update: t5_display

  - platform: homeassistant
    id: prevent_deep_sleep
    name: "Prevent Deep Sleep"
    entity_id: input_boolean.prevent_deep_sleep

text_sensor:
  - platform: homeassistant
    name: "Porta Garage"
    id: portagarage
    entity_id: sensor.porta_garage
    on_value: 
      then:
        - script.execute: all_data_received

script:
  - id: all_data_received
    then:
      - component.update: battery_voltage
      - component.update: battery_percentage
      - component.update: t5_display
      - script.execute: enter_sleep     

  - id: enter_sleep
    mode: queued
    then:
      - logger.log:  "Check for deep sleep"
      - delay: 1s
      - if:
          condition:
            binary_sensor.is_on: prevent_deep_sleep
          then:
            - logger.log:  "Deep sleep disabled"
            - delay: 15s
            - script.execute: all_data_received
          else:
            - logger.log: "Going to sleep for ${sleep_time} "             
            - deep_sleep.enter: 
                id: deep_sleep_1 
                sleep_duration: ${sleep_time}         

display:
- platform: t547
  id: t5_display
  update_interval: never
  lambda: |-
      
      #define FONTSIZE 56
      #define SMALLFONTSIZE 48
      #define LINESPACE 4
      #define CHARSPACE 1

      // Box 1 energia
      int xo = 0;
      int yo = 0;
      int xe = (FONTSIZE+CHARSPACE)*7;
      int ye = (FONTSIZE+(LINESPACE*2))*3;

      it.line(xo,yo ,xe,yo);
      it.line(xo,yo, xo,ye);
      it.line(xo,ye, xe,ye);
      it.line(xe,yo, xe,ye);

      int xOffset = 8;
      int yOffset = 0;
      int row = 1;

      // setlocale(LC_ALL, "it_IT");
      // std::locale::global(std::locale("it_IT.utf8"));
      // std::setlocale(LC_ALL, "it_IT.utf8");
      setlocale(LC_TIME, "it_IT");

      it.printf(xo+xOffset+0, yo+yOffset+(row*(FONTSIZE+LINESPACE)) , id(font_icons), TextAlign::BASELINE_LEFT, "\U000F17FF" );
      it.printf(xo+xOffset+FONTSIZE+CHARSPACE, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F06A1" );
      if(!isnan(id(powergenerated).state)) {
        it.printf(xo+xOffset+(2*(FONTSIZE+CHARSPACE))+((FONTSIZE+CHARSPACE)*4), yo+yOffset+(row*(FONTSIZE+LINESPACE)) , id(segoe), TextAlign::BASELINE_RIGHT, "%4.0f W", id(powergenerated).state);
      }

      row++;
      it.printf(xo+xOffset+0, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F095B" );
      it.printf(xo+xOffset+FONTSIZE+CHARSPACE, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F06A1" );
      if(!isnan(id(powerconsumed).state)) {
        it.printf(xo+xOffset+(2*(FONTSIZE+CHARSPACE))+((FONTSIZE+CHARSPACE)*4), yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(segoe), TextAlign::BASELINE_RIGHT, "%4.0f W", id(powerconsumed).state);
      }

      row++;
      if(!isnan(id(powerconsumed).state)) {
        if(id(powerbalance).state > 0) {
          it.printf(xo+xOffset+0, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F06A1" );
          it.printf(xo+xOffset+FONTSIZE+CHARSPACE, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F192D" );
          it.printf(xo+xOffset+(2*(FONTSIZE+CHARSPACE))+((FONTSIZE+CHARSPACE)*4), yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(segoe), TextAlign::BASELINE_RIGHT, "%4.0f W", id(powerbalance).state);
        } else {
          it.printf(xo+xOffset+0, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F192C" );
          it.printf(xo+xOffset+FONTSIZE+CHARSPACE, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F06A1" );
          it.printf(xo+xOffset+(2*(FONTSIZE+CHARSPACE))+((FONTSIZE+CHARSPACE)*4), yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(segoe), TextAlign::BASELINE_RIGHT, "%4.0f W", id(powerbalance).state);
        }
      }

      // box 2 temp e wind
      xo = 0;
      yo = ye+10;
      xe = (FONTSIZE+CHARSPACE)*7;
      ye = yo+((FONTSIZE+(LINESPACE*2))*4);

      it.line(xo,yo ,xe,yo);
      it.line(xo,yo, xo,ye);
      it.line(xo,ye, xe,ye);
      it.line(xe,yo, xe,ye);

      xOffset = 8;
      yOffset = 0;
      row = 1;

      it.printf(xo+xOffset+0, yo+yOffset+(row*(FONTSIZE+LINESPACE)) , id(font_icons), TextAlign::BASELINE_LEFT, "\U000F10C2" );
      it.printf(xo+xOffset+FONTSIZE+CHARSPACE, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F0207" );
      if(!isnan(id(externaltemp).state)) {
        it.printf(xo+xOffset+(2*(FONTSIZE+CHARSPACE))+((FONTSIZE+CHARSPACE)*4), yo+yOffset+(row*(FONTSIZE+LINESPACE)) , id(segoe), TextAlign::BASELINE_RIGHT, "%2.1f °C", id(externaltemp).state);
      }

      row++;
      it.printf(xo+xOffset+0, yo+yOffset+(row*(FONTSIZE+LINESPACE)) , id(font_icons), TextAlign::BASELINE_LEFT, "\U000F058E" );
      it.printf(xo+xOffset+FONTSIZE+CHARSPACE, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F0207" );
      if(!isnan(id(umiditaesterna).state)) {
        it.printf(xo+xOffset+(2*(FONTSIZE+CHARSPACE))+((FONTSIZE+CHARSPACE)*4), yo+yOffset+(row*(FONTSIZE+LINESPACE)) , id(segoe), TextAlign::BASELINE_RIGHT, "%2.1f  %%", id(umiditaesterna).state);
      }

      row++;
      it.printf(xo+xOffset+0, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F059D" );
      it.printf(xo+xOffset+FONTSIZE+CHARSPACE, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F059D" );
      if(!isnan(id(windspeed).state)) {
        it.printf(xo+xOffset+(2*(FONTSIZE+CHARSPACE))+((FONTSIZE+CHARSPACE)*4), yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(segoe), TextAlign::BASELINE_RIGHT, "%3.0f Km/h", id(windspeed).state);
      }

      row++;
      it.printf(xo+xOffset+0, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F0DBB" );
      it.printf(xo+xOffset+FONTSIZE+CHARSPACE, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F059D" );
      if(!isnan(id(rafspeed).state)) {
        it.printf(xo+xOffset+(2*(FONTSIZE+CHARSPACE))+((FONTSIZE+CHARSPACE)*4), yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(segoe), TextAlign::BASELINE_RIGHT, "%3.0f Km/h", id(rafspeed).state);
      } 

      // box 3 Pellet
      xo = 0;
      yo = ye+10;
      xe = (FONTSIZE+CHARSPACE)*7;
      ye = yo+((FONTSIZE+(LINESPACE*2))*1);

      it.line(xo,yo ,xe,yo);
      it.line(xo,yo, xo,ye);
      it.line(xo,ye, xe,ye);
      it.line(xe,yo, xe,ye);

      xOffset = 8;
      yOffset = -10;
      row = 1;

      it.printf(xo+xOffset+0, yo+yOffset+(row*(FONTSIZE+LINESPACE)) , id(font_icons), TextAlign::BASELINE_LEFT, "\U000F06A0" );
      //it.printf(xo+xOffset+FONTSIZE+CHARSPACE, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F0207" );
      if(!isnan(id(pellet).state)) {
        it.printf(xo+xOffset+(2*(FONTSIZE+CHARSPACE))+((FONTSIZE+CHARSPACE)*4), yo+yOffset+(row*(FONTSIZE+LINESPACE)) , id(segoe), TextAlign::BASELINE_RIGHT, "%3.0f %%", id(pellet).state);
      }

      //*********************
      // box 4 temp cucina sala studio
      int xdue;
      xdue = 450 + (FONTSIZE*2) - 10;
      xo = xdue;
      yo = 0;
      xe = xo+(FONTSIZE+CHARSPACE)*7;
      ye = yo+((FONTSIZE+(LINESPACE*2))*3);

      it.line(xo,yo ,xe,yo);
      it.line(xo,yo, xo,ye);
      it.line(xo,ye, xe,ye);
      it.line(xe,yo, xe,ye);

      xOffset = 8;
      yOffset = 0;
      row = 1;

      it.printf(xo+xOffset+0, yo+yOffset+(row*(FONTSIZE+LINESPACE)) , id(font_icons), TextAlign::BASELINE_LEFT, "\U000F10C2" );
      it.printf(xo+xOffset+FONTSIZE+CHARSPACE, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F028F" );
      if(!isnan(id(tempcucina).state)) {
        it.printf(xo+xOffset+(2*(FONTSIZE+CHARSPACE))+((FONTSIZE+CHARSPACE)*4), yo+yOffset+(row*(FONTSIZE+LINESPACE)) , id(segoe), TextAlign::BASELINE_RIGHT, "%2.1f °C", id(tempcucina).state);
      }

      row++;
      it.printf(xo+xOffset+0, yo+yOffset+(row*(FONTSIZE+LINESPACE)) , id(font_icons), TextAlign::BASELINE_LEFT, "\U000F10C2" );
      it.printf(xo+xOffset+FONTSIZE+CHARSPACE, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F156D" );
      if(!isnan(id(tempsala).state)) {
        it.printf(xo+xOffset+(2*(FONTSIZE+CHARSPACE))+((FONTSIZE+CHARSPACE)*4), yo+yOffset+(row*(FONTSIZE+LINESPACE)) , id(segoe), TextAlign::BASELINE_RIGHT, "%2.1f °C", id(tempsala).state);
      }

      row++;
      it.printf(xo+xOffset+0, yo+yOffset+(row*(FONTSIZE+LINESPACE)) , id(font_icons), TextAlign::BASELINE_LEFT, "\U000F10C2" );
      it.printf(xo+xOffset+FONTSIZE+CHARSPACE, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F07C0" );
      if(!isnan(id(tempstudio).state)) {
        it.printf(xo+xOffset+(2*(FONTSIZE+CHARSPACE))+((FONTSIZE+CHARSPACE)*4), yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(segoe), TextAlign::BASELINE_RIGHT, "%2.1f °C", id(tempstudio).state);
      }


      // box 5 temp perc pioggio pioggiaCm press
      xo = xdue;
      yo = ye+10;
      xe = xo+(FONTSIZE+CHARSPACE)*7;
      ye = yo+((FONTSIZE+(LINESPACE*2))*4);

      it.line(xo,yo ,xe,yo);
      it.line(xo,yo, xo,ye);
      it.line(xo,ye, xe,ye);
      it.line(xe,yo, xe,ye);

      xOffset = 8;
      yOffset = 0;
      row = 1;

      it.printf(xo+xOffset+0, yo+yOffset+(row*(FONTSIZE+LINESPACE)) , id(font_icons), TextAlign::BASELINE_LEFT, "\U000F10C2" );
      it.printf(xo+xOffset+FONTSIZE+CHARSPACE, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F157D" );
      if(!isnan(id(temppercepita).state)) {
        it.printf(xo+xOffset+(2*(FONTSIZE+CHARSPACE))+((FONTSIZE+CHARSPACE)*4), yo+yOffset+(row*(FONTSIZE+LINESPACE)) , id(segoe), TextAlign::BASELINE_RIGHT, "%2.1f °C", id(temppercepita).state);
      }

      row++;
      it.printf(xo+xOffset+0, yo+yOffset+(row*(FONTSIZE+LINESPACE)) , id(font_icons), TextAlign::BASELINE_LEFT, "\U000F0596" );
      it.printf(xo+xOffset+FONTSIZE+CHARSPACE, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F0CDC" );
      if(!isnan(id(pioggia).state)) {
        it.printf(xo+xOffset+(2*(FONTSIZE+CHARSPACE))+((FONTSIZE+CHARSPACE)*4), yo+yOffset+(row*(FONTSIZE+LINESPACE)) , id(segoesmall), TextAlign::BASELINE_RIGHT, "%2.1f  mm/h", id(pioggia).state*10);
      }

      row++;
      it.printf(xo+xOffset+0, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F0596" );
      it.printf(xo+xOffset+FONTSIZE+CHARSPACE, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F1478" );
      if(!isnan(id(pioggia1giorno).state)) {
        it.printf(xo+xOffset+(2*(FONTSIZE+CHARSPACE))+((FONTSIZE+CHARSPACE)*4), yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(segoesmall), TextAlign::BASELINE_RIGHT, "%2.1f cm/g", id(pioggia1giorno).state);
      }

      row++;
      it.printf(xo+xOffset+0, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F00B5" );
      it.printf(xo+xOffset+FONTSIZE+CHARSPACE, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F00B5" );
      if(!isnan(id(pressione).state)) {
        it.printf(xo+xOffset+(2*(FONTSIZE+CHARSPACE))+((FONTSIZE+CHARSPACE)*4), yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(segoesmall), TextAlign::BASELINE_RIGHT, "%4.0f mbar", id(pressione).state);
      } 

      // box 6 Garage
      xo = xdue;
      yo = ye+10;
      xe = xo+(FONTSIZE+CHARSPACE)*7;
      ye = yo+((FONTSIZE+(LINESPACE*2))*1);

      it.line(xo,yo ,xe,yo);
      it.line(xo,yo, xo,ye);
      it.line(xo,ye, xe,ye);
      it.line(xe,yo, xe,ye);

      xOffset = 8;
      yOffset = -10;
      row = 1;

      it.printf(xo+xOffset+0, yo+yOffset+(row*(FONTSIZE+LINESPACE)) , id(font_icons), TextAlign::BASELINE_LEFT, "\U000F12D3" );
      it.printf(xo+xOffset+FONTSIZE+CHARSPACE, yo+yOffset+(row*(FONTSIZE+LINESPACE)), id(font_icons), TextAlign::BASELINE_LEFT, "\U000F12D4" );
      //if(strlen(id(portagarage).state.length() > 0 )) {
        it.printf(xo+xOffset+(2*(FONTSIZE+CHARSPACE))+((FONTSIZE+CHARSPACE)*4), yo+yOffset+(row*(FONTSIZE+LINESPACE)) , id(segoe), TextAlign::BASELINE_RIGHT, "%s ", id(portagarage).state.c_str());
      //} else {
      //  it.printf(xo+xOffset+(2*(FONTSIZE+CHARSPACE))+((FONTSIZE+CHARSPACE)*4), yo+yOffset+(row*(FONTSIZE+LINESPACE)) , id(segoe), TextAlign::BASELINE_RIGHT, "bho");
      //}

      //****** orologio
      
      const char *wd[] = {"", "Dom", "Lun", "Mar", "Mer", "Gio", "Ven", "Sab"};
      const char  *my[] = {"", "Gen", "Feb", "Mar", "Apr", "Mag", "Giu", "Lug", "Ago", "Set", "Ott", "Nov", "Dic"};
      auto tempo = id(esptime).now();

      int xmid;
      xmid = xdue - 80;
      it.strftime(xmid, 100, id(segoesmall), TextAlign::BASELINE_CENTER, "%H:%M", id(esptime).now());
      it.printf(xmid, 150, id(segoesmall), TextAlign::BASELINE_CENTER, "%s ", wd[tempo.day_of_week]);     
      it.strftime(xmid, 200, id(segoesmall), TextAlign::BASELINE_CENTER, "%d", id(esptime).now());
      it.printf(xmid, 250, id(segoesmall), TextAlign::BASELINE_CENTER, "%s ", my[tempo.month]);     


      it.printf(xmid, 525, id(segoebat), TextAlign::BASELINE_CENTER, "%.1fV %.0f%%", id(battery_voltage).voltage->state, id(battery_percentage).state);
      
